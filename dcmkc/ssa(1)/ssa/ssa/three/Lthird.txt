%{ 
#include "y.tab.h" 
%} 
noun "JSPM"|"RSCOE"|"College"|"Cat"|"Pune"|"sport"
adjective "smart"|"hot"|"main"|"nice"
verb "read"|"study"|"are"|"is"|"am"
adverb "eager"|"fast"|"quick"
conjunctions "and"|"or"|"but" 
pronoun "Mani"|"boy"|"she"|"it"|"he"|"boy" 
preposition "of"|"in"|"between"|"at"
%% 
{noun} { printf("noun: %s\n", yytext);return NOUN; } 
{pronoun} { printf("pronoun: %s\n", yytext); return PRONOUN; } 
{adjective} { printf("adjective: %s\n", yytext); return ADJECTIVE; } 
{verb} { printf("verb: %s\n", yytext); return VERB; } 
{adverb} { printf("adverb: %s\n", yytext); return ADVERB; } 
{conjunctions} { printf("conjunctions: %s\n", yytext); return CONJUNCTION; } 
{preposition} { printf("preposition: %s\n", yytext); return PREPOSITION; } 
"." { return yytext[0]; } 
%% 
int yywrap()
{ 
 return 1; 
}













command:
Third ke commands
yacc -d -v third.y
lex third.l
gcc  -o  third  lex.yy.c  y.tab.c
./third
Mani is hot








This code defines a simple lexical analyzer using the Flex (Fast Lexical Analyzer) tool. It specifies a set of token definitions and how they should be processed when encountered in the input. Below is an explanation of each part of the code:

Header Section
c
Copy code
%{ 
#include "y.tab.h" 
%}
%{ %}: Denotes the beginning and end of the C code to be copied directly into the generated lexical analyzer.
#include "y.tab.h": Includes the header file generated by the Yacc parser generator. This file contains token definitions that will be used for token return values.
Definitions Section
c
Copy code
noun "JSPM"|"RSCOE"|"College"|"Cat"|"Pune"|"sport"
adjective "smart"|"hot"|"main"|"nice"
verb "read"|"study"|"are"|"is"|"am"
adverb "eager"|"fast"|"quick"
conjunctions "and"|"or"|"but" 
pronoun "Mani"|"boy"|"she"|"it"|"he"|"boy" 
preposition "of"|"in"|"between"|"at"
These lines define sets of words corresponding to different parts of speech.
noun: Defines a set of noun tokens.
adjective: Defines a set of adjective tokens.
verb: Defines a set of verb tokens.
adverb: Defines a set of adverb tokens.
conjunctions: Defines a set of conjunction tokens.
pronoun: Defines a set of pronoun tokens.
preposition: Defines a set of preposition tokens.
Each set is defined by listing the words in double quotes separated by the pipe (|) character.
Rules Section
c
Copy code
%%
{noun} { printf("noun: %s\n", yytext); return NOUN; } 
{pronoun} { printf("pronoun: %s\n", yytext); return PRONOUN; } 
{adjective} { printf("adjective: %s\n", yytext); return ADJECTIVE; } 
{verb} { printf("verb: %s\n", yytext); return VERB; } 
{adverb} { printf("adverb: %s\n", yytext); return ADVERB; } 
{conjunctions} { printf("conjunctions: %s\n", yytext); return CONJUNCTION; } 
{preposition} { printf("preposition: %s\n", yytext); return PREPOSITION; } 
"." { return yytext[0]; } 
%%
%%: Marks the beginning and end of the rules section in Flex.
{noun} to {preposition}: Each of these rules matches any word defined in the respective category.
When a match is found, the corresponding action is executed:
printf("..."): Prints the part of speech and the matched text.
return ...: Returns a token type (e.g., NOUN, PRONOUN, etc.) as defined in y.tab.h.
".": Matches a period character and returns it as the token.
Auxiliary Functions
c
Copy code
int yywrap()
{ 
 return 1; 
}
int yywrap(): Defines the yywrap() function which Flex calls when it reaches the end of the input.
return 1;: Indicates to Flex that the input is finished.
Summary
This Flex program defines several sets of words corresponding to different parts of speech.
When a word from the input matches one of these sets, it prints the part of speech and returns the corresponding token.
The yywrap function is a standard function in Flex programs to handle the end of input.