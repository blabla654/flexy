%{
#include <stdio.h>
int yylex();
int yyerror();
%}

%token NOUN PRONOUN ADJECTIVE VERB ADVERB CONJUNCTION PREPOSITION

%%
sentence: compound {printf("COMPOND SENTENCE\n");}
    |
    simple {printf("SIMPLE SENTENCE\n");}
    ;
simple: subject VERB object;
compound: subject VERB object CONJUNCTION subject VERB object;
subject: NOUN|PRONOUN;
object: NOUN|ADJECTIVE NOUN|VERB NOUN|ADVERB NOUN|PREPOSITION NOUN;
%%
 
int yyerror()
{
return 1;
}

int main()
{
yyparse();
return 0;
}








This code defines a simple parser using Yacc/Bison, which is a parser generator. The code specifies the grammar rules for parsing simple and compound sentences. Here is a detailed line-by-line explanation:

Header Section
c
Copy code
%{
#include <stdio.h>
int yylex();
int yyerror();
%}
%{ %}: Denotes the beginning and end of the C code to be copied directly into the generated parser.
#include <stdio.h>: Includes the standard input-output library needed for functions like printf.
int yylex();: Declares the lexical analyzer function yylex, which will be generated by Flex and used by the parser to get tokens.
int yyerror();: Declares the error handling function yyerror.
Token Definitions
c
Copy code
%token NOUN PRONOUN ADJECTIVE VERB ADVERB CONJUNCTION PREPOSITION
%token: Declares the tokens used in the grammar rules. These tokens correspond to the parts of speech defined in the Flex file.
Grammar Rules Section
c
Copy code
%%
sentence: compound {printf("COMPOND SENTENCE\n");}
    |
    simple {printf("SIMPLE SENTENCE\n");}
    ;
%%: Marks the beginning of the grammar rules section.
sentence: Defines a sentence as either a compound sentence or a simple sentence.
If a compound sentence is matched, it prints "COMPOND SENTENCE".
If a simple sentence is matched, it prints "SIMPLE SENTENCE".
c
Copy code
simple: subject VERB object;
simple: Defines a simple sentence structure as subject VERB object.
c
Copy code
compound: subject VERB object CONJUNCTION subject VERB object;
compound: Defines a compound sentence structure as subject VERB object CONJUNCTION subject VERB object.
c
Copy code
subject: NOUN|PRONOUN;
subject: Defines a subject as either a NOUN or a PRONOUN.
c
Copy code
object: NOUN|ADJECTIVE NOUN|VERB NOUN|ADVERB NOUN|PREPOSITION NOUN;
object: Defines an object with several possible structures:
NOUN
ADJECTIVE NOUN
VERB NOUN
ADVERB NOUN
PREPOSITION NOUN
Auxiliary Functions Section
c
Copy code
%%
int yyerror()
{
    return 1;
}
%%: Marks the end of the grammar rules section.
int yyerror(): Defines the error handling function yyerror, which will be called by the parser in case of a syntax error.
return 1;: Indicates that an error has occurred.
Main Function
c
Copy code
int main()
{
    yyparse();
    return 0;
}
int main(): Defines the main function of the program.
yyparse();: Calls the parser function yyparse, which will start the parsing process.
return 0;: Returns 0 to indicate that the program has completed successfully.
Summary
This Yacc/Bison code defines the grammar for recognizing simple and compound sentences.
It uses tokens defined by the Flex lexical analyzer.
When a sentence is parsed, it prints whether it is a simple or compound sentence.
The error handling function yyerror is defined to handle syntax errors.
The main function starts the parsing process by calling yyparse.

















